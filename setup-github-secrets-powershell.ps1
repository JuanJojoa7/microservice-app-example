# Script de configuraci√≥n para Azure + GitHub (PowerShell)
# ============================================================

Write-Host "================================================================"
Write-Host "   üîß CONFIGURACI√ìN AUTOM√ÅTICA AZURE + GITHUB"
Write-Host "   Obtener credenciales y configurar secretos"
Write-Host "================================================================"
Write-Host ""

Write-Host "üìã PASO 1: Verificando herramientas..." -ForegroundColor Yellow

# Verificar Azure CLI
Write-Host "üîç Verificando Azure CLI..." -ForegroundColor Cyan
try {
    $azVersion = az --version 2>$null
    if ($LASTEXITCODE -ne 0) {
        throw "Azure CLI no encontrado"
    }
    Write-Host "‚úÖ Azure CLI encontrado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Azure CLI no instalado" -ForegroundColor Red
    Write-Host ""
    Write-Host "üí° SOLUCI√ìN:" -ForegroundColor Yellow
    Write-Host "   1. Ejecutar: winget install Microsoft.AzureCLI"
    Write-Host "   2. O descargar desde: https://aka.ms/InstallAzureCLI"
    Write-Host "   3. Reiniciar PowerShell despu√©s de instalar"
    Write-Host ""
    Read-Host "Presiona Enter despu√©s de instalar Azure CLI..."
    exit 1
}

# Verificar GitHub CLI
Write-Host "üîç Verificando GitHub CLI..." -ForegroundColor Cyan
$ghPath = $null

# Buscar en rutas comunes
$possiblePaths = @(
    "C:\Program Files\GitHub CLI\gh.exe",
    "C:\Program Files (x86)\GitHub CLI\gh.exe",
    "$env:USERPROFILE\AppData\Local\Programs\GitHub CLI\gh.exe"
)

foreach ($path in $possiblePaths) {
    if (Test-Path $path) {
        $ghPath = $path
        break
    }
}

# Verificar si est√° en PATH
if (-not $ghPath) {
    try {
        $ghCommand = Get-Command gh -ErrorAction Stop
        $ghPath = $ghCommand.Source
    } catch {
        # No est√° en PATH
    }
}

if (-not $ghPath) {
    Write-Host "‚ùå GitHub CLI no encontrado" -ForegroundColor Red
    Write-Host ""
    Write-Host "üí° SOLUCI√ìN:" -ForegroundColor Yellow
    Write-Host "   1. Ejecutar: winget install GitHub.cli"
    Write-Host "   2. O descargar desde: https://cli.github.com/"
    Write-Host "   3. CERRAR Y ABRIR PowerShell despu√©s de instalar"
    Write-Host ""
    $respuesta = Read-Host "¬øYa instalaste GitHub CLI? (Y/N)"
    if ($respuesta -eq "Y" -or $respuesta -eq "y") {
        Write-Host ""
        Write-Host "‚ö†Ô∏è  CIERRA PowerShell y √°brelo de nuevo, luego ejecuta:" -ForegroundColor Yellow
        Write-Host "   .\setup-github-secrets-powershell.ps1"
        Write-Host ""
    }
    Read-Host "Presiona Enter para continuar..."
    exit 1
}

Write-Host "‚úÖ GitHub CLI encontrado: $ghPath" -ForegroundColor Green
Write-Host ""

# Verificar autenticaci√≥n GitHub
Write-Host "üìã PASO 2: Verificando autenticaci√≥n GitHub..." -ForegroundColor Yellow
try {
    & $ghPath auth status 2>$null
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå No est√°s autenticado en GitHub" -ForegroundColor Red
        Write-Host "üîê Ejecutando autenticaci√≥n..." -ForegroundColor Cyan
        & $ghPath auth login
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Error en autenticaci√≥n" -ForegroundColor Red
            Read-Host "Presiona Enter para continuar..."
            exit 1
        }
    }
    Write-Host "‚úÖ GitHub CLI autenticado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error verificando autenticaci√≥n GitHub" -ForegroundColor Red
    exit 1
}

# Login a Azure
Write-Host "üìã PASO 3: Login a Azure..." -ForegroundColor Yellow
try {
    az account show 2>$null | Out-Null
    if ($LASTEXITCODE -ne 0) {
        Write-Host "üîê Abriendo login de Azure..." -ForegroundColor Cyan
        az login
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Error en login de Azure" -ForegroundColor Red
            Read-Host "Presiona Enter para continuar..."
            exit 1
        }
    }
    Write-Host "‚úÖ Login a Azure exitoso" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error en login de Azure" -ForegroundColor Red
    exit 1
}

Write-Host ""

# Obtener informaci√≥n de Azure
Write-Host "üìã PASO 4: Obteniendo informaci√≥n de Azure..." -ForegroundColor Yellow
Write-Host "üìä Obteniendo datos de suscripci√≥n..." -ForegroundColor Cyan

try {
    $AZURE_SUBSCRIPTION_ID = az account show --query "id" -o tsv
    $AZURE_TENANT_ID = az account show --query "tenantId" -o tsv
    
    Write-Host "‚úÖ Subscription ID: $AZURE_SUBSCRIPTION_ID" -ForegroundColor Green
    Write-Host "‚úÖ Tenant ID: $AZURE_TENANT_ID" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error obteniendo informaci√≥n de Azure" -ForegroundColor Red
    exit 1
}

Write-Host ""

# Crear Service Principal
Write-Host "üìã PASO 5: Creando Service Principal..." -ForegroundColor Yellow

$timestamp = Get-Date -Format "yyyyMMddHHmmss"
$SP_NAME = "sp-microservices-$timestamp"

Write-Host "üîß Creando Service Principal: $SP_NAME" -ForegroundColor Cyan

try {
    az ad sp create-for-rbac --name $SP_NAME --role "Contributor" --scopes "/subscriptions/$AZURE_SUBSCRIPTION_ID" --sdk-auth > sp-credentials.json
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Error creando Service Principal" -ForegroundColor Red
        exit 1
    }
    
    Write-Host "‚úÖ Service Principal creado exitosamente" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error creando Service Principal" -ForegroundColor Red
    exit 1
}

Write-Host ""

# Extraer credenciales
Write-Host "üìã PASO 6: Extrayendo credenciales..." -ForegroundColor Yellow

try {
    $json = Get-Content 'sp-credentials.json' | ConvertFrom-Json
    $AZURE_CLIENT_ID = $json.clientId
    $AZURE_CLIENT_SECRET = $json.clientSecret
    
    Write-Host "‚úÖ Client ID: $AZURE_CLIENT_ID" -ForegroundColor Green
    Write-Host "‚úÖ Client Secret: [HIDDEN]" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error extrayendo credenciales" -ForegroundColor Red
    exit 1
}

Write-Host ""

# Configurar secretos en GitHub
Write-Host "üìã PASO 7: Configurando secretos en GitHub..." -ForegroundColor Yellow

try {
    Write-Host "üîß Configurando AZURE_CLIENT_ID..." -ForegroundColor Cyan
    $AZURE_CLIENT_ID | & $ghPath secret set AZURE_CLIENT_ID
    
    Write-Host "üîß Configurando AZURE_CLIENT_SECRET..." -ForegroundColor Cyan
    $AZURE_CLIENT_SECRET | & $ghPath secret set AZURE_CLIENT_SECRET
    
    Write-Host "üîß Configurando AZURE_SUBSCRIPTION_ID..." -ForegroundColor Cyan
    $AZURE_SUBSCRIPTION_ID | & $ghPath secret set AZURE_SUBSCRIPTION_ID
    
    Write-Host "üîß Configurando AZURE_TENANT_ID..." -ForegroundColor Cyan
    $AZURE_TENANT_ID | & $ghPath secret set AZURE_TENANT_ID
    
    Write-Host "‚úÖ Todos los secretos configurados" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error configurando secretos" -ForegroundColor Red
    Write-Host "Detalles: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

Write-Host ""

# Verificar configuraci√≥n
Write-Host "üìã PASO 8: Verificando configuraci√≥n..." -ForegroundColor Yellow

try {
    $secrets = & $ghPath secret list
    if ($secrets -match "AZURE") {
        Write-Host "‚úÖ Secretos verificados en GitHub" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è No se pudieron verificar los secretos, pero deber√≠an estar configurados" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è No se pudieron verificar los secretos, pero deber√≠an estar configurados" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéâ ¬°CONFIGURACI√ìN COMPLETADA!" -ForegroundColor Green
Write-Host "================================" -ForegroundColor Green
Write-Host ""
Write-Host "‚úÖ Service Principal creado: $SP_NAME" -ForegroundColor Green
Write-Host "‚úÖ Credenciales extra√≠das autom√°ticamente" -ForegroundColor Green
Write-Host "‚úÖ Secretos configurados en GitHub Repository" -ForegroundColor Green
Write-Host ""
Write-Host "üìä RESUMEN DE SECRETOS CONFIGURADOS:" -ForegroundColor Cyan
Write-Host "   AZURE_CLIENT_ID = $AZURE_CLIENT_ID"
Write-Host "   AZURE_CLIENT_SECRET = [HIDDEN]"
Write-Host "   AZURE_SUBSCRIPTION_ID = $AZURE_SUBSCRIPTION_ID"
Write-Host "   AZURE_TENANT_ID = $AZURE_TENANT_ID"
Write-Host ""
Write-Host "üöÄ PR√ìXIMOS PASOS:" -ForegroundColor Yellow
Write-Host "1. Hacer commit y push de tus cambios"
Write-Host "2. Ir a GitHub Actions: https://github.com/JuanJojoa7/microservice-app-example/actions"
Write-Host "3. Ejecutar 'Infrastructure Pipeline'"
Write-Host "4. Seleccionar acci√≥n: 'deploy'"
Write-Host "5. ¬°Disfrutar tu aplicaci√≥n en Azure!"
Write-Host ""
Write-Host "üí∞ Costo estimado: ~`$7-10 USD/mes" -ForegroundColor Green
Write-Host "üóëÔ∏è  Para eliminar: Ejecutar pipeline con acci√≥n 'destroy'" -ForegroundColor Yellow
Write-Host ""

# Limpiar archivo de credenciales
Remove-Item sp-credentials.json -ErrorAction SilentlyContinue

Read-Host "Presiona Enter para continuar..."