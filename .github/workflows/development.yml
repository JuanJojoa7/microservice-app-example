name: Development Pipeline

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - test-only
  push:
    branches: [ feature/infrastructure-setup ]
  pull_request:
    branches: [ feature/infrastructure-setup ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================
  # TESTS COMPLETOS
  # ============================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js 16 (compatible with Vue 2)
      uses: actions/setup-node@v4
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package.json
          todos-api/package.json

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # Frontend Tests
    - name: Test Frontend
      working-directory: ./frontend
      run: |
        echo "Validating Frontend structure..."
        [ -f "package.json" ] && echo "✓ package.json exists"
        [ -f "index.html" ] && echo "✓ index.html exists"
        [ -d "src" ] && echo "✓ src directory exists"
        [ -f "src/main.js" ] && echo "✓ main.js exists"
        echo "✓ Frontend structure validated"

    # TODOs API Tests  
    - name: Test TODOs API
      working-directory: ./todos-api
      run: |
        echo "Validating TODOs API structure..."
        [ -f "package.json" ] && echo "✓ package.json exists"
        [ -f "server.js" ] && echo "✓ server.js exists"
        [ -f "routes.js" ] && echo "✓ routes.js exists"
        [ -f "todoController.js" ] && echo "✓ todoController.js exists"
        echo "✓ TODOs API structure validated"

    # Users API Tests (Java)
    - name: Test Users API
      working-directory: ./users-api
      run: |
        echo "Validating Users API structure..."
        [ -f "pom.xml" ] && echo "✓ pom.xml exists"
        [ -f "src/main/java/com/elgris/usersapi/UsersApiApplication.java" ] && echo "✓ Main class exists"
        echo "✓ Users API structure validated"

    # Auth API Tests (Go)
    - name: Test Auth API
      working-directory: ./auth-api
      run: |
        echo "Validating Auth API structure..."
        [ -f "main.go" ] && echo "✓ main.go exists"
        [ -f "user.go" ] && echo "✓ user.go exists"
        echo "✓ Auth API structure validated"

    # Log Processor Tests (Python)
    - name: Test Log Processor
      working-directory: ./log-message-processor
      run: |
        echo "Validating Log Processor structure..."
        [ -f "main.py" ] && echo "✓ main.py exists"
        [ -f "requirements.txt" ] && echo "✓ requirements.txt exists"
        echo "✓ Log Processor structure validated"

    # Docker Compose Test
    - name: Test Docker Compose
      run: |
        echo "Validating Docker Compose files..."
        
        if command -v docker-compose >/dev/null 2>&1; then
          echo "✓ Using docker-compose (v1)"
          docker-compose -f docker-compose-simple.yml build
        elif docker compose version >/dev/null 2>&1; then
          echo "✓ Using docker compose (v2)"
          docker compose -f docker-compose-simple.yml build
        else
          echo "Installing docker-compose..."
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose -f docker-compose-simple.yml build
        fi
        
        echo "✓ All images built successfully"

    # Pattern Scripts Test
    - name: Test Pattern Scripts
      run: |
        echo "Validating pattern scripts..."
        [ -s "presentacion-final.bat" ] && echo "✓ presentacion-final.bat OK"
        [ -s "comparacion-patrones.bat" ] && echo "✓ comparacion-patrones.bat OK" 
        [ -s "servicios.bat" ] && echo "✓ servicios.bat OK"
        [ -s "haproxy-simple.cfg" ] && echo "✓ haproxy-simple.cfg OK"
        [ -s "docker-compose-simple.yml" ] && echo "✓ docker-compose-simple.yml OK"
        echo "✓ All pattern files validated"

  # ============================================
  # DEPLOYMENT A AZURE VM
  # ============================================
  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    needs: test
    if: always() && (github.event.inputs.action == 'deploy' || github.event_name == 'push' || github.event_name == 'workflow_dispatch') && (needs.test.result == 'success' || needs.test.result == 'skipped')

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get VM Information
      id: get-vm-info
      run: |
        echo "Searching for VM in Azure..."
        
        # Search for VM by name in resource group
        VM_EXISTS=$(az vm show --name "vm-microservices-demo" --resource-group "RG-MICROSERVICES-DEMO-V2" --query "id" -o tsv 2>/dev/null || echo "")
        
        if [ -z "$VM_EXISTS" ]; then
          echo "ERROR: VM not found. Checking available VMs..."
          echo "Available VMs:"
          az vm list --query "[].{Name:name, ResourceGroup:resourceGroup}" --output table
          echo "vm_exists=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Get public IP
        VM_IP=$(az network public-ip show --name "pip-microservices-vm" --resource-group "RG-MICROSERVICES-DEMO-V2" --query "ipAddress" -o tsv)
        
        if [ -z "$VM_IP" ] || [ "$VM_IP" == "null" ]; then
          echo "ERROR: Could not get public IP"
          echo "Available Public IPs:"
          az network public-ip list --query "[].{Name:name, ResourceGroup:resourceGroup, IP:ipAddress}" --output table
          exit 1
        fi
        
        echo "✓ VM found with IP: $VM_IP"
        echo "vm_ip=$VM_IP" >> $GITHUB_OUTPUT
        echo "application_url=http://$VM_IP" >> $GITHUB_OUTPUT
        echo "dashboard_url=http://$VM_IP:8404/stats" >> $GITHUB_OUTPUT
        echo "vm_exists=true" >> $GITHUB_OUTPUT

    - name: Deploy to VM
      if: steps.get-vm-info.outputs.vm_exists == 'true'
      timeout-minutes: 15
      run: |
        echo "Deploying application to VM..."
        
        VM_IP="${{ steps.get-vm-info.outputs.vm_ip }}"
        echo "VM IP: $VM_IP"
        
        # Install sshpass for password authentication
        echo "Installing sshpass..."
        sudo apt-get update -qq
        sudo apt-get install -y sshpass
        
        # SSH credentials (same as Terraform configuration)
        SSH_USER="azureuser"
        SSH_PASS="MicroservicesDemo2025!"
        
        echo "Connecting to VM via SSH..."
        
        # Execute deployment commands directly on VM
        sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 $SSH_USER@$VM_IP << 'EOF'
        set -e
        echo "=== Starting deployment on VM ==="
        
        # Navigate to home directory
        cd /home/azureuser
        echo "Current directory: $(pwd)"
        
        # Install git if not present
        if ! command -v git &> /dev/null; then
          echo "Installing git..."
          sudo apt-get update
          sudo apt-get install -y git
        fi
        
        # Clone or update repository
        if [ -d "microservice-app-example" ]; then
          echo "Repository exists, updating..."
          cd microservice-app-example
          git fetch origin
          git reset --hard origin/feature/infrastructure-setup
        else
          echo "Cloning repository..."
          git clone -b feature/infrastructure-setup https://github.com/JuanJojoa7/microservice-app-example.git
          cd microservice-app-example
        fi
        
        # Verify we have the compose file
        if [ ! -f "docker-compose-simple.yml" ]; then
          echo "ERROR: docker-compose-simple.yml not found!"
          ls -la
          exit 1
        fi
        
        echo "Found docker-compose-simple.yml ✓"
        
        # Ensure Docker is running
        echo "Starting Docker service..."
        if ! systemctl start docker 2>/dev/null; then
          echo "Docker not installed, installing now..."
          
          # Install Docker (fallback if cloud-init didn't finish)
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker azureuser
          
          # Install docker-compose
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          
          echo "Docker installed successfully"
        fi
        
        sudo systemctl enable docker
        echo "Docker service started ✓"
        
        # Stop any existing containers
        echo "Stopping existing containers..."
        sudo docker-compose -f docker-compose-simple.yml down --remove-orphans || echo "No existing containers"
        
        # Pull latest images
        echo "Pulling Docker images..."
        sudo docker-compose -f docker-compose-simple.yml pull || echo "Pull failed, will build instead"
        
        # Start the application
        echo "Starting microservices application..."
        sudo docker-compose -f docker-compose-simple.yml up -d --build
        
        # Wait for services to initialize
        echo "Waiting 60 seconds for services to initialize..."
        sleep 60
        
        # Check container status
        echo "=== Container Status ==="
        sudo docker ps
        
        # Test application
        echo "=== Testing Application ==="
        if curl -f -s http://localhost > /dev/null; then
          echo "✓ Application is responding locally"
        else
          echo "⚠ Application not yet responding locally"
        fi
        
        # Show access URLs
        PUBLIC_IP=$(curl -s ifconfig.me 2>/dev/null || echo "$VM_IP")
        echo ""
        echo "=== DEPLOYMENT COMPLETED ==="
        echo "🌐 Application URL: http://$PUBLIC_IP"
        echo "📊 HAProxy Dashboard: http://$PUBLIC_IP:8404/stats"
        echo "👤 Dashboard Login: admin/admin"
        echo ""
        echo "🎯 Patterns Implemented:"
        echo "  ✓ Circuit Breaker (HAProxy)"
        echo "  ✓ Cache Aside (Redis)"
        echo "  ✓ Load Balancing"
        echo "  ✓ Service Discovery"
        echo ""
        
        EOF
        
        echo ""
        echo "SUCCESS: Deployment completed successfully!"
        echo "🌐 Application: http://$VM_IP"
        echo "📊 Dashboard: http://$VM_IP:8404/stats"

    - name: Verify Deployment
      if: steps.get-vm-info.outputs.vm_exists == 'true'
      run: |
        VM_IP="${{ steps.get-vm-info.outputs.vm_ip }}"
        
        echo "Verifying deployment..."
        sleep 15
        
        # Test application
        echo "Testing application connection..."
        if curl -f -s -o /dev/null http://$VM_IP; then
          echo "✓ Application accessible at: http://$VM_IP"
        else
          echo "WARNING: Application not responding immediately (normal for first deployment)"
        fi
        
        # Test HAProxy dashboard
        echo "Testing HAProxy dashboard..."
        if curl -f -s -o /dev/null http://$VM_IP:8404/stats; then
          echo "✓ Dashboard accessible at: http://$VM_IP:8404/stats"
        else
          echo "WARNING: Dashboard not responding (may be initializing)"
        fi

  # ============================================
  # FINAL REPORT
  # ============================================
  report:
    name: Final Report
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()

    steps:
    - name: Generate Report
      run: |
        echo "# DEPLOYMENT PIPELINE REPORT"
        echo ""
        echo "## RESULTS:"
        echo "Tests: ${{ needs.test.result }}"
        echo "Deploy: ${{ needs.deploy.result }}"
        echo ""
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "## APPLICATION ACCESS:"
          echo "• Main Application: http://52.167.206.251"
          echo "• HAProxy Dashboard: http://52.167.206.251:8404/stats"
          echo "• Dashboard User: admin/admin"
          echo ""
          echo "## IMPLEMENTED PATTERNS:"
          echo "✓ Circuit Breaker: HAProxy handles failures automatically"
          echo "✓ Cache Aside: Redis optimizes performance"
          echo "✓ Load Balancing: Load distribution"
          echo "✓ Service Discovery: Automatic configuration"
          echo ""
          echo "## ESTIMATED COST:"
          echo "• VM Standard_B1s: ~$7-10 USD/month"
          echo "• Total infrastructure: ~$10 USD/month"
        fi
        echo ""
        echo "## LOCAL DEMO:"
        echo "To compare patterns, run: presentacion-final.bat"