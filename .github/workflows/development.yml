name: Development Pipeline

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - test-only
  push:
    branches: [ feature/infrastructure-setup ]
  pull_request:
    branches: [ feature/infrastructure-setup ]
  workflow_run:
    workflows: ["🏗️ Infrastructure Pipeline"]
    types: [completed]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================
  # TESTS COMPLETOS
  # ============================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: >
      always() && (
        github.event_name != 'workflow_run' ||
        github.event.workflow_run.conclusion == 'success'
      )

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js 16 (compatible with Vue 2)
      uses: actions/setup-node@v4
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package.json
          todos-api/package.json

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # Frontend Tests
    - name: Test Frontend
      working-directory: ./frontend
      run: |
        echo "Validating Frontend structure..."
        [ -f "package.json" ] && echo "✓ package.json exists"
        [ -f "index.html" ] && echo "✓ index.html exists"
        [ -d "src" ] && echo "✓ src directory exists"
        [ -f "src/main.js" ] && echo "✓ main.js exists"
        echo "✓ Frontend structure validated"

    # TODOs API Tests  
    - name: Test TODOs API
      working-directory: ./todos-api
      run: |
        echo "Validating TODOs API structure..."
        [ -f "package.json" ] && echo "✓ package.json exists"
        [ -f "server.js" ] && echo "✓ server.js exists"
        [ -f "routes.js" ] && echo "✓ routes.js exists"
        [ -f "todoController.js" ] && echo "✓ todoController.js exists"
        echo "✓ TODOs API structure validated"

    # Users API Tests (Java)
    - name: Test Users API
      working-directory: ./users-api
      run: |
        echo "Validating Users API structure..."
        [ -f "pom.xml" ] && echo "✓ pom.xml exists"
        [ -f "src/main/java/com/elgris/usersapi/UsersApiApplication.java" ] && echo "✓ Main class exists"
        echo "✓ Users API structure validated"

    # Auth API Tests (Go)
    - name: Test Auth API
      working-directory: ./auth-api
      run: |
        echo "Validating Auth API structure..."
        [ -f "main.go" ] && echo "✓ main.go exists"
        [ -f "user.go" ] && echo "✓ user.go exists"
        echo "✓ Auth API structure validated"

    # Log Processor Tests (Python)
    - name: Test Log Processor
      working-directory: ./log-message-processor
      run: |
        echo "Validating Log Processor structure..."
        [ -f "main.py" ] && echo "✓ main.py exists"
        [ -f "requirements.txt" ] && echo "✓ requirements.txt exists"
        echo "✓ Log Processor structure validated"

    # Docker Compose Test
    - name: Test Docker Compose
      run: |
        echo "Validating Docker Compose files..."
        
        if command -v docker-compose >/dev/null 2>&1; then
          echo "✓ Using docker-compose (v1)"
          docker-compose -f docker-compose-simple.yml config -q
        elif docker compose version >/dev/null 2>&1; then
          echo "✓ Using docker compose (v2)"
          docker compose -f docker-compose-simple.yml config -q
        else
          echo "Installing docker-compose..."
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose -f docker-compose-simple.yml config -q
        fi
        
        echo "✓ docker-compose syntax is valid"

    # Pattern Scripts Test
    - name: Test Pattern Scripts
      run: |
        echo "Validating pattern scripts..."
        [ -s "presentacion-final.bat" ] && echo "✓ presentacion-final.bat OK"
        [ -s "comparacion-patrones.bat" ] && echo "✓ comparacion-patrones.bat OK" 
        [ -s "servicios.bat" ] && echo "✓ servicios.bat OK"
        [ -s "haproxy-simple.cfg" ] && echo "✓ haproxy-simple.cfg OK"
        [ -s "docker-compose-simple.yml" ] && echo "✓ docker-compose-simple.yml OK"
        echo "✓ All pattern files validated"

  # ============================================
  # DEPLOYMENT A AZURE VM
  # ============================================
  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    needs: test
    if: >
      always() && needs.test.result != 'failure' && (
        github.event_name != 'workflow_run' ||
        github.event.workflow_run.conclusion == 'success'
      )

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push images to Docker Hub
      env:
        IMAGE_TAG: ${{ github.sha }}
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      run: |
        set -e

        echo "Building and pushing images with tag: $IMAGE_TAG"

        # Frontend
        docker buildx build \
          --platform linux/amd64 \
          -t ${DOCKERHUB_USERNAME}/microservices-frontend:${IMAGE_TAG} \
          -f frontend/Dockerfile frontend \
          --push

        # Auth API (Go)
        docker buildx build \
          --platform linux/amd64 \
          -t ${DOCKERHUB_USERNAME}/microservices-auth-api:${IMAGE_TAG} \
          -f auth-api/Dockerfile auth-api \
          --push

        # Users API (Java)
        docker buildx build \
          --platform linux/amd64 \
          -t ${DOCKERHUB_USERNAME}/microservices-users-api:${IMAGE_TAG} \
          -f users-api/Dockerfile users-api \
          --push

        # TODOs API (Node)
        docker buildx build \
          --platform linux/amd64 \
          -t ${DOCKERHUB_USERNAME}/microservices-todos-api:${IMAGE_TAG} \
          -f todos-api/Dockerfile todos-api \
          --push

        # Log Processor (Python)
        docker buildx build \
          --platform linux/amd64 \
          -t ${DOCKERHUB_USERNAME}/microservices-log-processor:${IMAGE_TAG} \
          -f log-message-processor/Dockerfile log-message-processor \
          --push

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get VM Information
      id: get-vm-info
      run: |
        echo "Searching for VM in Azure..."
        
        # Search for VM by name in resource group
        VM_EXISTS=$(az vm show --name "vm-microservices-demo" --resource-group "RG-MICROSERVICES-DEMO-V3" --query "id" -o tsv 2>/dev/null || echo "")
        
        if [ -z "$VM_EXISTS" ]; then
          echo "ERROR: VM not found. Checking available VMs..."
          echo "Available VMs:"
          az vm list --query "[].{Name:name, ResourceGroup:resourceGroup}" --output table
          echo "vm_exists=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Get public IP
        VM_IP=$(az network public-ip show --name "pip-microservices-vm" --resource-group "RG-MICROSERVICES-DEMO-V3" --query "ipAddress" -o tsv)
        
        if [ -z "$VM_IP" ] || [ "$VM_IP" == "null" ]; then
          echo "ERROR: Could not get public IP"
          echo "Available Public IPs:"
          az network public-ip list --query "[].{Name:name, ResourceGroup:resourceGroup, IP:ipAddress}" --output table
          exit 1
        fi
        
        echo "✓ VM found with IP: $VM_IP"
        echo "vm_ip=$VM_IP" >> $GITHUB_OUTPUT
        echo "application_url=http://$VM_IP" >> $GITHUB_OUTPUT
        echo "dashboard_url=http://$VM_IP:8404/stats" >> $GITHUB_OUTPUT
        echo "vm_exists=true" >> $GITHUB_OUTPUT

    - name: Deploy to VM (pull images from Docker Hub)
      if: steps.get-vm-info.outputs.vm_exists == 'true'
      timeout-minutes: 30  # Timeout optimizado para Standard_B2s
      run: |
        echo "Deploying application to VM via SSH (Standard_B2s optimized)..."
        
        VM_IP="${{ steps.get-vm-info.outputs.vm_ip }}"
        echo "VM IP: $VM_IP"
        
        # Install sshpass for password authentication
        echo "Installing sshpass..."
        sudo apt-get update -qq
        sudo apt-get install -y sshpass
        
        # SSH credentials (same as Terraform configuration)
        SSH_USER="azureuser"
        SSH_PASS="MicroservicesDemo2025!"
        
        echo "Connecting to VM via SSH..."
        
        # Execute deployment commands directly on VM
        sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 $SSH_USER@$VM_IP << 'EOF'
        set -e
        echo "=== DEPLOYMENT TO STANDARD_B2S VM ==="
        
        # Navigate to home directory
        cd /home/azureuser
        echo "Current directory: $(pwd)"
        echo "VM Resources: $(nproc) vCPUs, $(free -h | grep '^Mem:' | awk '{print $2}') RAM"
        
        # Install git if not present
        if ! command -v git &> /dev/null; then
          echo "Installing git..."
          sudo apt-get update
          sudo apt-get install -y git
        fi
        
        # Clone or update repository
        if [ -d "microservice-app-example" ]; then
          echo "Repository exists, updating..."
          cd microservice-app-example
          git fetch origin
          git reset --hard origin/feature/infrastructure-setup
        else
          echo "Cloning repository..."
          git clone -b feature/infrastructure-setup https://github.com/JuanJojoa7/microservice-app-example.git
          cd microservice-app-example
        fi
        
        echo "Found docker-compose-simple.yml ✓"
        
        # Setup Docker optimized for Standard_B2s
        echo "Setting up Docker (optimized for 2 vCPUs, 4GB RAM)..."
        
        if ! command -v docker &> /dev/null; then
          echo "Installing Docker..."
          curl -fsSL https://get.docker.com | sudo sh
          sudo systemctl start docker
          sudo systemctl enable docker
        else
          sudo systemctl start docker || true
        fi
        
        # Add user to docker group
        sudo usermod -aG docker azureuser
        
        # Install docker-compose
        if ! command -v docker-compose &> /dev/null; then
          echo "Installing docker-compose..."
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi
        
        # OPTIMIZACIÓN PARA STANDARD_B2S: Parallel builds optimizados
        echo "Cleaning Docker environment..."
        sudo docker system prune -f || true
        sudo docker-compose -f docker-compose-simple.yml down --remove-orphans || true
        
        # ESTRATEGIA OPTIMIZADA: Semi-parallel builds (aprovechar 2 vCPUs)
        echo "=== PULLING AND STARTING PREBUILT IMAGES FROM DOCKER HUB ==="

        # Export env vars for compose substitutions
        export DOCKERHUB_USERNAME='${{ secrets.DOCKERHUB_USERNAME }}'
        export IMAGE_TAG='${{ github.sha }}'

        # Ensure compose file exists
        if [ ! -f "docker-compose.deploy.yml" ]; then
          echo "ERROR: docker-compose.deploy.yml not found!"
          exit 1
        fi

        # Pull and start services using prebuilt images
        sudo docker compose -f docker-compose.deploy.yml pull || sudo docker-compose -f docker-compose.deploy.yml pull
        sudo docker compose -f docker-compose.deploy.yml up -d || sudo docker-compose -f docker-compose.deploy.yml up -d

        echo "Waiting for services to become healthy..."
        sleep 30

        echo "=== FINAL HEALTH CHECK ==="
        sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

        if curl -f -s http://localhost > /dev/null 2>&1; then
          echo "✓ Main application is healthy"
        else
          echo "⚠ Main application not responding yet"
        fi

        if curl -f -s http://localhost:8404/stats > /dev/null 2>&1; then
          echo "✓ HAProxy dashboard is healthy"
        else
          echo "⚠ HAProxy dashboard not responding"
        fi

        PUBLIC_IP=$(curl -s ifconfig.me 2>/dev/null || hostname -I | awk '{print $1}')
        echo "\n=== ✅ DEPLOYMENT COMPLETED USING DOCKER HUB IMAGES ==="
        echo "🌐 Application URL: http://$PUBLIC_IP"
        echo "📊 HAProxy Dashboard: http://$PUBLIC_IP:8404/stats"

        EOF

        echo ""
        echo "SUCCESS: Deployment completed successfully!"
        echo "🌐 Application: http://$VM_IP"
        echo "📊 Dashboard: http://$VM_IP:8404/stats"

    - name: Verify Deployment
      if: steps.get-vm-info.outputs.vm_exists == 'true'
      run: |
        VM_IP="${{ steps.get-vm-info.outputs.vm_ip }}"
        
        echo "Verifying deployment..."
        sleep 15
        
        # Test application
        echo "Testing application connection..."
        if curl -f -s -o /dev/null http://$VM_IP; then
          echo "✓ Application accessible at: http://$VM_IP"
        else
          echo "WARNING: Application not responding immediately (normal for first deployment)"
        fi
        
        # Test HAProxy dashboard
        echo "Testing HAProxy dashboard..."
        if curl -f -s -o /dev/null http://$VM_IP:8404/stats; then
          echo "✓ Dashboard accessible at: http://$VM_IP:8404/stats"
        else
          echo "WARNING: Dashboard not responding (may be initializing)"
        fi

  # ============================================
  # FINAL REPORT
  # ============================================
  report:
    name: Final Report
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()

    steps:
    - name: Generate Report
      run: |
        echo "# 🎯 DEPLOYMENT PIPELINE REPORT"
        echo ""
        echo "## 📊 RESULTS:"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Deploy: ${{ needs.deploy.result }}"
        echo ""
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "## 🌐 APPLICATION ACCESS:"
          echo "- Main Application: http://\$VM_IP (check deploy logs for actual IP)"
          echo "- HAProxy Dashboard: http://\$VM_IP:8404/stats"
          echo "- Dashboard Credentials: admin/admin"
          echo ""
          echo "## ✅ IMPLEMENTED PATTERNS:"
          echo "✓ Circuit Breaker: HAProxy handles service failures automatically"
          echo "✓ Cache Aside: Redis optimizes database access performance"
          echo "✓ Load Balancing: HAProxy distributes traffic efficiently"
          echo "✓ Service Discovery: Docker Compose provides automatic configuration"
          echo ""
          echo "## 💰 INFRASTRUCTURE COST:"
          echo "- VM Standard_B2s: ~$15-20 USD/month (2 vCPUs, 4GB RAM)"
          echo "- Storage: ~$2-3 USD/month"
          echo "- Networking: ~$1-2 USD/month"
          echo "- **Total: ~$18-25 USD/month**"
          echo ""
          echo "## 🎯 PERFORMANCE BENEFITS:"
          echo "- Standard_B2s provides stable Docker builds"
          echo "- No VM corruption issues"
          echo "- Faster compilation times"
          echo "- Reliable SSH connectivity"
        else
          echo "## ❌ DEPLOYMENT FAILED"
          echo "Check the deploy job logs for details."
          echo "Common solutions:"
          echo "1. Run Infrastructure Pipeline with 'clean-deploy'"
          echo "2. Verify VM is running and accessible"
          echo "3. Check SSH connectivity"
        fi
        echo ""
        echo "## 🔧 LOCAL DEMO:"
        echo "To test patterns locally, run: docker-compose -f docker-compose-simple.yml up"
        echo "To compare patterns, run: presentacion-final.bat"