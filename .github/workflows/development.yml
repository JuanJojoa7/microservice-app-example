name: 🚀 Development Pipeline

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - test-only

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================
  # TESTS COMPLETOS
  # ============================================
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js 16 (compatible with Vue 2)
      uses: actions/setup-node@v4
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package.json
          todos-api/package.json

    - name: 🔧 Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: 🔧 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'

    - name: 🔧 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # Frontend Tests
    - name: 🎨 Test Frontend
      working-directory: ./frontend
      run: |
        echo "🎨 Validating Frontend structure..."
        [ -f "package.json" ] && echo "✅ package.json exists"
        [ -f "index.html" ] && echo "✅ index.html exists"
        [ -d "src" ] && echo "✅ src directory exists"
        [ -f "src/main.js" ] && echo "✅ main.js exists"
        echo "✅ Frontend structure validated"

    # TODOs API Tests  
    - name: 📝 Test TODOs API
      working-directory: ./todos-api
      run: |
        echo "📝 Validating TODOs API structure..."
        [ -f "package.json" ] && echo "✅ package.json exists"
        [ -f "server.js" ] && echo "✅ server.js exists"
        [ -f "routes.js" ] && echo "✅ routes.js exists"
        [ -f "todoController.js" ] && echo "✅ todoController.js exists"
        echo "✅ TODOs API structure validated"

    # Users API Tests (Java)
    - name: 👥 Test Users API
      working-directory: ./users-api
      run: |
        echo "👥 Validating Users API structure..."
        [ -f "pom.xml" ] && echo "✅ pom.xml exists"
        [ -f "src/main/java/com/elgris/usersapi/UsersApiApplication.java" ] && echo "✅ Main class exists"
        echo "✅ Users API structure validated"

    # Auth API Tests (Go)
    - name: 🔐 Test Auth API
      working-directory: ./auth-api
      run: |
        echo "🔐 Validating Auth API structure..."
        [ -f "main.go" ] && echo "✅ main.go exists"
        [ -f "user.go" ] && echo "✅ user.go exists"
        echo "✅ Auth API structure validated"

    # Log Processor Tests (Python)
    - name: 📊 Test Log Processor
      working-directory: ./log-message-processor
      run: |
        echo "📊 Validating Log Processor structure..."
        [ -f "main.py" ] && echo "✅ main.py exists"
        [ -f "requirements.txt" ] && echo "✅ requirements.txt exists"
        echo "✅ Log Processor structure validated"

    # Docker Compose Test
    - name: 🐳 Test Docker Compose
      run: |
        echo "🐳 Validating Docker Compose files..."
        
        if command -v docker-compose >/dev/null 2>&1; then
          echo "✅ Using docker-compose (v1)"
          docker-compose -f docker-compose-simple.yml build
        elif docker compose version >/dev/null 2>&1; then
          echo "✅ Using docker compose (v2)"
          docker compose -f docker-compose-simple.yml build
        else
          echo "📦 Installing docker-compose..."
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose -f docker-compose-simple.yml build
        fi
        
        echo "✅ All images built successfully"

    # Pattern Scripts Test
    - name: 🎯 Test Pattern Scripts
      run: |
        echo "🧪 Validating pattern scripts..."
        [ -s "presentacion-final.bat" ] && echo "✅ presentacion-final.bat OK"
        [ -s "comparacion-patrones.bat" ] && echo "✅ comparacion-patrones.bat OK" 
        [ -s "servicios.bat" ] && echo "✅ servicios.bat OK"
        [ -s "haproxy-simple.cfg" ] && echo "✅ haproxy-simple.cfg OK"
        [ -s "docker-compose-simple.yml" ] && echo "✅ docker-compose-simple.yml OK"
        echo "✅ All pattern files validated"

  # ============================================
  # DEPLOYMENT A AZURE VM
  # ============================================
  deploy:
    name: 🚀 Deploy to Azure VM
    runs-on: ubuntu-latest
    needs: test
    if: always() && github.event.inputs.action == 'deploy' && (needs.test.result == 'success' || needs.test.result == 'skipped')

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 📊 Get VM Information
      id: get-vm-info
      run: |
        echo "🔍 Buscando VM en Azure..."
        
        # Buscar la VM por nombre en el resource group (nombres exactos de Azure)
        VM_EXISTS=$(az vm show --name "vm-microservices-demo" --resource-group "RG-MICROSERVICES-DEMO-V2" --query "id" -o tsv 2>/dev/null || echo "")
        
        if [ -z "$VM_EXISTS" ]; then
          echo "❌ VM no encontrada. Verificando nombres..."
          echo "🔍 Listando VMs disponibles:"
          az vm list --query "[].{Name:name, ResourceGroup:resourceGroup}" --output table
          echo "vm_exists=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Obtener IP pública
        VM_IP=$(az network public-ip show --name "pip-microservices-vm" --resource-group "RG-MICROSERVICES-DEMO-V2" --query "ipAddress" -o tsv)
        
        if [ -z "$VM_IP" ] || [ "$VM_IP" == "null" ]; then
          echo "❌ No se pudo obtener la IP pública de la VM"
          echo "🔍 Listando IPs públicas:"
          az network public-ip list --query "[].{Name:name, ResourceGroup:resourceGroup, IP:ipAddress}" --output table
          exit 1
        fi
        
        echo "✅ VM encontrada con IP: $VM_IP"
        echo "vm_ip=$VM_IP" >> $GITHUB_OUTPUT
        echo "application_url=http://$VM_IP" >> $GITHUB_OUTPUT
        echo "dashboard_url=http://$VM_IP:8404/stats" >> $GITHUB_OUTPUT
        echo "vm_exists=true" >> $GITHUB_OUTPUT

    - name: 🚀 Deploy to VM
      if: steps.get-vm-info.outputs.vm_exists == 'true'
      run: |
        echo "🚀 Desplegando aplicación en la VM..."
        
        VM_IP="${{ steps.get-vm-info.outputs.vm_ip }}"
        echo "🌐 VM IP: $VM_IP"
        
        # Configurar SSH sin interacción
        echo "🔑 Configurando SSH..."
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Instalar sshpass para usar contraseña
        sudo apt-get update -qq
        sudo apt-get install -y sshpass
        
        # Función para ejecutar comandos SSH con retry
        execute_ssh() {
          local max_attempts=3
          local attempt=1
          local delay=15
          
          while [ $attempt -le $max_attempts ]; do
            echo "🔄 Intento $attempt de $max_attempts..."
            
            if sshpass -p 'DevOps123!' ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 azureuser@$VM_IP "$1"; then
              echo "✅ Comando ejecutado exitosamente"
              return 0
            else
              echo "❌ Intento $attempt falló"
              if [ $attempt -lt $max_attempts ]; then
                echo "⏳ Esperando ${delay}s antes del siguiente intento..."
                sleep $delay
              fi
              attempt=$((attempt + 1))
            fi
          done
          
          echo "❌ Todos los intentos SSH fallaron"
          return 1
        }
        
        echo "📦 Ejecutando deployment..."
        
        # Script de deployment remoto
        DEPLOY_SCRIPT='
        set -e
        echo "🏠 Iniciando deployment en la VM..."
        
        # Navegar al directorio home
        cd /home/azureuser
        
        # Actualizar sistema básico
        echo "📦 Actualizando sistema..."
        sudo apt-get update -qq
        
        # Instalar Git si no está
        if ! command -v git &> /dev/null; then
          echo "📥 Instalando Git..."
          sudo apt-get install -y git
        fi
        
        # Clonar o actualizar repositorio
        echo "📁 Preparando código..."
        if [ -d "microservice-app-example" ]; then
          cd microservice-app-example
          echo "🔄 Actualizando repositorio existente..."
          git fetch origin || echo "⚠️  Fetch falló, continuando..."
          git reset --hard origin/feature/infrastructure-setup || git reset --hard HEAD
        else
          echo "📥 Clonando repositorio..."
          git clone -b feature/infrastructure-setup https://github.com/JuanJojoa7/microservice-app-example.git || {
            echo "❌ Error clonando repositorio"
            exit 1
          }
          cd microservice-app-example
        fi
        
        # Verificar que tenemos el archivo docker-compose
        if [ ! -f "docker-compose-simple.yml" ]; then
          echo "❌ docker-compose-simple.yml no encontrado"
          ls -la
          exit 1
        fi
        
        echo "📋 Archivos disponibles:"
        ls -la *.yml *.yaml 2>/dev/null || echo "No hay archivos YAML"
        
        # Asegurar que Docker esté funcionando
        echo "🐳 Verificando Docker..."
        sudo systemctl start docker
        sudo systemctl enable docker
        
        # Limpiar contenedores anteriores
        echo "🧹 Limpiando deployment anterior..."
        sudo docker-compose -f docker-compose-simple.yml down --remove-orphans 2>/dev/null || echo "No hay contenedores previos"
        
        # Descargar imágenes
        echo "📥 Descargando imágenes Docker..."
        sudo docker-compose -f docker-compose-simple.yml pull || echo "⚠️  Pull falló, continuando con build"
        
        # Construir e iniciar
        echo "🚀 Iniciando aplicación..."
        sudo docker-compose -f docker-compose-simple.yml up -d --build
        
        # Esperar y verificar
        echo "⏳ Esperando inicialización (60s)..."
        sleep 60
        
        echo "📊 Estado final de contenedores:"
        sudo docker ps
        
        echo "🌐 URLs de acceso:"
        PUBLIC_IP=$(curl -s ifconfig.me 2>/dev/null || echo "IP_NOT_FOUND")
        echo "• Aplicación: http://$PUBLIC_IP"
        echo "• Dashboard: http://$PUBLIC_IP:8404/stats"
        
        echo "✅ Deployment completado exitosamente"
        '
        
        # Ejecutar el script de deployment
        if execute_ssh "$DEPLOY_SCRIPT"; then
          echo "🎉 ¡Deployment exitoso!"
          echo "🌐 Aplicación disponible en: http://$VM_IP"
          echo "📊 Dashboard HAProxy: http://$VM_IP:8404/stats"
        else
          echo "❌ Deployment falló después de varios intentos"
          exit 1
        fi

    - name: ✅ Verify Deployment
      if: steps.get-vm-info.outputs.vm_exists == 'true'
      run: |
        VM_IP="${{ steps.get-vm-info.outputs.vm_ip }}"
        
        echo "🔍 Verificando despliegue..."
        sleep 15
        
        # Verificar que la aplicación responde
        echo "🌐 Probando conexión a la aplicación..."
        if curl -f -s -o /dev/null http://$VM_IP; then
          echo "✅ Aplicación accesible en: http://$VM_IP"
        else
          echo "⚠️  Aplicación no responde inmediatamente (normal en primer deployment)"
        fi
        
        # Verificar dashboard HAProxy
        echo "📊 Probando dashboard HAProxy..."
        if curl -f -s -o /dev/null http://$VM_IP:8404/stats; then
          echo "✅ Dashboard accesible en: http://$VM_IP:8404/stats"
        else
          echo "⚠️  Dashboard no responde (puede estar inicializando)"
        fi

  # ============================================
  # REPORTE FINAL
  # ============================================
  report:
    name: 📊 Final Report
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()

    steps:
    - name: 📋 Generate Report
      run: |
        echo "# 🎯 DEPLOYMENT PIPELINE REPORT"
        echo ""
        echo "## 📊 RESULTADOS:"
        echo "🧪 Tests: ${{ needs.test.result }}"
        echo "🚀 Deploy: ${{ needs.deploy.result }}"
        echo ""
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "## 🌐 ACCESO A LA APLICACIÓN:"
          echo "• **Aplicación Principal**: http://52.167.206.251"
          echo "• **Dashboard HAProxy**: http://52.167.206.251:8404/stats"
          echo "• **Usuario Dashboard**: admin/admin"
          echo ""
          echo "## 🎯 PATRONES IMPLEMENTADOS:"
          echo "✅ **Circuit Breaker**: HAProxy maneja fallos automáticamente"
          echo "✅ **Cache Aside**: Redis optimiza performance"
          echo "✅ **Load Balancing**: Distribución de carga"
          echo "✅ **Service Discovery**: Configuración automática"
          echo ""
          echo "## 💰 COSTO ESTIMADO:"
          echo "• VM Standard_B1s: ~$7-10 USD/mes"
          echo "• Total infraestructura: ~$10 USD/mes"
        fi
        echo ""
        echo "## 🎓 DEMO LOCAL:"
        echo "Para comparar patrones, ejecuta: \`presentacion-final.bat\`"