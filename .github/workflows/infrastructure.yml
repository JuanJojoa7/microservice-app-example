# ============================================
# PIPELINE DE INFRAESTRUCTURA - TERRAFORM
# ============================================
# Rebuild VM - SSH configuration fix

name: 🏗️ Infrastructure Pipeline

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Acción a ejecutar'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - deploy
        - destroy
      
  push:
    branches:
      - feature/infrastructure-setup
    paths:
      - 'terraform/**'
  
  pull_request:
    paths:
      - 'terraform/**'

env:
  TF_VERSION: '1.5.0'
  WORKING_DIRECTORY: './terraform'

jobs:
  # ============================================
  # VALIDACIÓN Y PLAN
  # ============================================
  terraform-plan:
    name: 📋 Terraform Plan
    runs-on: ubuntu-latest
    outputs:
      plan-exists: ${{ steps.plan.outputs.plan-exists }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 📂 Terraform Init
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        terraform init
        
    - name: ✅ Terraform Validate
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: terraform validate

    - name: 🎯 Terraform Format Check
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: terraform fmt -check=true -diff=true

    - name: 📋 Terraform Plan
      id: plan
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        terraform plan -detailed-exitcode -out=tfplan
        echo "plan-exists=true" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: 📤 Upload Plan
      if: steps.plan.outputs.plan-exists == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: ${{ env.WORKING_DIRECTORY }}/tfplan
        retention-days: 1

    - name: 💬 Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `
          ## 🏗️ Terraform Plan Results
          
          ✅ **Terraform Format and Style**: ${{ steps.plan.outcome }}
          ✅ **Terraform Initialization**: Successful
          ✅ **Terraform Validation**: Successful
          ✅ **Terraform Plan**: ${{ steps.plan.outcome }}
          
          <details><summary>Show Plan Output</summary>
          
          \`\`\`
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          
          </details>
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  # ============================================
  # DESPLIEGUE DE INFRAESTRUCTURA
  # ============================================
  terraform-deploy:
    name: 🚀 Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: >
      (github.event.inputs.action == 'deploy' || 
       (github.ref == 'refs/heads/feature/infrastructure-setup' && github.event_name == 'push')) &&
      needs.terraform-plan.outputs.plan-exists == 'true'
    
    environment: 
      name: azure-production
      url: ${{ steps.terraform-output.outputs.application_url }}

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 📥 Download Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: ${{ env.WORKING_DIRECTORY }}

    - name: 📂 Terraform Init
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: terraform init

    - name: 🚀 Terraform Apply
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        terraform apply -auto-approve tfplan
        
    - name: 📊 Get Terraform Outputs
      id: terraform-output
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        echo "application_url=$(terraform output -raw application_url)" >> $GITHUB_OUTPUT
        echo "dashboard_url=$(terraform output -raw dashboard_url)" >> $GITHUB_OUTPUT
        echo "ssh_command=$(terraform output -raw ssh_connection_command)" >> $GITHUB_OUTPUT
        echo "public_ip=$(terraform output -raw public_ip_address)" >> $GITHUB_OUTPUT

    - name: 🎉 Deployment Success
      run: |
        echo "🎉 ¡DESPLIEGUE EXITOSO!"
        echo "🌐 Aplicación: ${{ steps.terraform-output.outputs.application_url }}"
        echo "📊 Dashboard: ${{ steps.terraform-output.outputs.dashboard_url }}"
        echo "🔗 SSH: ${{ steps.terraform-output.outputs.ssh_command }}"
        echo "📱 IP: ${{ steps.terraform-output.outputs.public_ip }}"

    - name: 💬 Post Success Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `
          ## 🎉 Despliegue Exitoso!
          
          ### 🌐 Aplicación Desplegada:
          - **Aplicación**: ${{ steps.terraform-output.outputs.application_url }}
          - **Dashboard**: ${{ steps.terraform-output.outputs.dashboard_url }}
          - **IP Pública**: ${{ steps.terraform-output.outputs.public_ip }}
          
          ### 🔐 Acceso SSH:
          \`\`\`bash
          ${{ steps.terraform-output.outputs.ssh_command }}
          \`\`\`
          
          ### 👤 Credenciales App:
          - Usuario: **admin**
          - Contraseña: **admin**
          
          ### 💰 Costo Estimado: ~$7-10 USD/mes
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  # ============================================
  # DESTRUCCIÓN DE INFRAESTRUCTURA
  # ============================================
  terraform-destroy:
    name: 💥 Destroy Infrastructure
    runs-on: ubuntu-latest
    if: >
      github.event.inputs.action == 'destroy' ||
      (github.event_name == 'push' && 
       contains(github.event.head_commit.message, '[DESTROY]'))
    
    environment: 
      name: azure-production

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 📂 Terraform Init
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: terraform init

    - name: 💥 Terraform Destroy
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        terraform destroy -auto-approve
        
    - name: ✅ Cleanup Complete
      run: echo "🗑️ Infraestructura eliminada exitosamente"