version: '3.8'

services:
  # ============================================
  # SIMPLIFIED PATTERN TESTING
  # ============================================
  
  # Circuit Breaker - HAProxy Load Balancer (Simple config)
  haproxy:
    image: haproxy:2.8-alpine
    container_name: microservices_haproxy
    ports:
      - "80:80"      # Main application entry point
      - "8404:8404"  # HAProxy stats dashboard
    volumes:
      - ./haproxy-simple.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - frontend
      - auth-api
      - users-api
      - todos-api
    networks:
      - microservices

  # ============================================
  # ORIGINAL MICROSERVICES (UNCHANGED)
  # ============================================

  # Frontend - Vue.js Application
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: microservices_frontend
    ports:
      - "8081:8080"  # Direct access for debugging
    depends_on:
      - auth-api
      - todos-api
    networks:
      - microservices
    environment:
      - NODE_ENV=production

  # Authentication API - Go
  auth-api:
    build:
      context: ./auth-api
      dockerfile: Dockerfile
    container_name: microservices_auth
    ports:
      - "8000:8000"  # Direct access for debugging
    depends_on:
      - users-api
    networks:
      - microservices
    environment:
      - AUTH_API_PORT=8000
      - USERS_API_ADDRESS=http://users-api:8083
      - JWT_SECRET=myfancysecret

  # Users API - Java Spring Boot
  users-api:
    build:
      context: ./users-api
      dockerfile: Dockerfile
    container_name: microservices_users
    ports:
      - "8083:8083"  # Direct access for debugging
    networks:
      - microservices
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JWT_SECRET=myfancysecret

  # TODOs API - Node.js
  todos-api:
    build:
      context: ./todos-api
      dockerfile: Dockerfile
    container_name: microservices_todos
    ports:
      - "8082:8082"  # Direct access for debugging
    depends_on:
      - redis
    networks:
      - microservices
    environment:
      - TODO_API_PORT=8082
      - JWT_SECRET=myfancysecret
      - REDIS_HOST=redis
      - REDIS_PORT=6379

  # Redis for both Cache and Application
  redis:
    image: redis:7-alpine
    container_name: microservices_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - microservices

  # Log Message Processor - Python
  log-processor:
    build:
      context: ./log-message-processor
      dockerfile: Dockerfile
    container_name: microservices_logs
    depends_on:
      - redis
    networks:
      - microservices
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_CHANNEL=log_channel

networks:
  microservices:
    driver: bridge
    name: microservices_network

volumes:
  redis_data:
    name: microservices_redis_data